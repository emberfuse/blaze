name: Run Preflight Checks

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  primary-tests:
    name: PHP ${{ matrix.php }} - ${{ matrix.stability }} - Linux
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: preflight
          MYSQL_USER: root
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php: [7.4, 8.0]
        composer: [1, 2]
        stability: [prefer-lowest, prefer-stable]
        include:
          - php: 7.4
            stability: prefer-lowest
            additional-deps: '"mockery/mockery:>=1.2.3"'
          - php: 8.0
            stability: prefer-lowest
            additional-deps: '"mockery/mockery:>=1.3.3"'

    steps:
      - uses: actions/checkout@v2.3.3

      - name: Setup PHP with pecl extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, php-cs-fixer, phpunit, composer:v${{ matrix.composer }}
          extensions: swoole, fileinfo, gmp, intl, json, mbstring, openssl, dom, curl, libxml, zip, pcntl, pdo, sqlite, pdo_sqlite, gd
          coverage: pcov

      - name: Verify MySQL connection
        run: |
          mysql --version
          sudo apt-get install -y mysql-client
          sudo /etc/init.d/mysql start
          mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports[3306] }} -uroot -e "SHOW DATABASES"

      - name: Cache composer dependencies
        uses: actions/cache@v2.1.1
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        run: |
          php --version
          composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
          composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress
          npm install
          npm run production

      - name: Boot application
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan --version

      - name: Cache yarn dependencies
        uses: actions/cache@v2.1.1
        with:
          path: node_modules
          key: yarn-${{ hashFiles('yarn.lock') }}

      - name: Run yarn
        run: |
          yarn --version
          yarn && yarn dev

      - name: Run tests
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
          DB_USERNAME: root
        run: ./vendor/bin/phpunit --verbose

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: Logs
          path: ./storage/logs
